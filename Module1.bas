Attribute VB_Name = "Module1"
' Created by Katie Conlon, Data Analytics Intern. August 2019. Updated January 2020.

''' Enhancements to add:
' Incorporate UPC cleaning tool. Variable needsUPCTool has already been created gathering a yes/no response. Suggest adding to the formatUPCs sub. There's starter code in there commented out. Also see Function UPCE2A & Function UPCA2E.

''' Used to aid error debugging.
Option Explicit

''' DECLARE PUBLIC VARIABLES
' Used in subs:
Dim nRowsTemp As Integer 'Used in subs: checkCategoriesMatch
Dim nRowsVol As Integer 'Used in subs: checkCategories & checkCategoriesMatch
Dim nRowsTarg As Integer 'Used in subs: checkCategories & checkCategoriesMatch
Dim planType As String 'Used in subs: collectUserInput, checkCategories, splitCleanedData, collectUserInput_CreateFiles & createSeparateFiles
Dim needsUPCTool As String 'Used in subs: collectUserInput
Dim doPercentsVary As String 'Used in subs: collectUserInput, checkCategories & checkCategoriesMatch
Dim clientName As String 'Used in subs: collectUserInput_CreateFiles & createSeparateFiles
Dim year As String 'Used in subs: collectUserInput_CreateFiles & createSeparateFiles
Dim quarter As String 'Used in subs: collectUserInput_CreateFiles & createSeparateFiles
Dim arrayCategory() As String 'Used in subs: collectPivotTableData & createSeparateFiles
Dim arraySalesVolume() As Double 'Used in subs: collectPivotTableData
Public filepath As String ' Used in Function: getFilePath & Sub: createSeparateFiles
Sub runAll()
' PURPOSE: Runs all necessary subs for the "Start Sample Plan" button.

' Run subs
Call clearWorksheets
Call collectUserInput
Call checkCategories
Call checkCategoriesMatch

' Copy/paste original Sampling Template into a new worksheet
Template.Copy After:=Template
Worksheets("Sampling Template (2)").Name = "Sampling Template Cleaned"

' Run subs
Call formatUPCs
Call cleanSalesVolume

' Activate Instructions tab
Instructions.Activate

End Sub
Sub runAll2()
' PURPOSE: Runs all necessary subs for the "Continue Sample Plan" button.

' Run subs
Call removeDuplicates
Call sortCates
Call createSampleBlocks
Call pivotSalesByCategory
Call collectPivotTableData
Call calcBlockPercents
Call splitCleanedData
Call generateTargets
Call generateTargetsPerChannel
Call cleanColumnHeadings

' Activate Instructions tab
Instructions.Activate

End Sub
Sub runAll3()
' PURPOSE: Runs all necessary subs for the "Finish Sample Plan" & "Update Sample Plan" buttons.

' Run sub
Call collectUserInput_CreateFiles
Call collectPivotTableData
Call createSeparateFiles

' Activate Instructions tab
Instructions.Activate

End Sub
Sub clearWorksheets()
' PURPOSE: Checks for worksheets created by this code and deletes them if they exist. (This is meant to clear previous work.)

' Declare variable
Dim ws As Worksheet

' Loop through each worksheet in the workbook
For Each ws In ThisWorkbook.Worksheets

    ' Determine if it's one of the worksheets generated by the code itself. If yes, then...
    If ws.Name = "Sampling Template Cleaned" Or ws.Name = "CheckCategories" Or ws.Name = "CategorySalesVolume" Or ws.Name = "HDA Data" Or ws.Name = "Retail Data" Then
        ' Delete worksheet (without displaying an alert)
        Application.DisplayAlerts = False
        ws.Delete
        Application.DisplayAlerts = True
    End If

Next ws

End Sub
Sub collectUserInput()
' PURPOSE: checks to see that required user inputs (on the Instructions page) are completed with valid information.
'If yes, then collect the information for later use.
'If no, then display an alert.

' Activate Instructions Sheet
Instructions.Activate

'' Collect whether HDA, Retail, or both.
' Checks to ensure user completed the user-defined field on the Instructions tab.
If Range("A:A").Find("Plan Type", lookat:=xlPart).Offset(1, 0).Value = "" Then
    MsgBox ("You must fill in the Plan Type.")
    End
Else
    planType = Range("A:A").Find("Plan Type", lookat:=xlPart).Offset(1, 0).Value
End If

'' Collect whether UPC Tool is required.
'NOTE: THIS IS TO BE USED FOR A FUTURE ENHANCEMENT
' Checks to ensure user completed the user-defined field on the Instructions tab.
If Range("A:A").Find("UPC Tool", lookat:=xlPart).Offset(1, 0).Value = "" Then
    MsgBox ("You must answer whether or not the UPC Expansion Tool is required.")
    End
Else
    needsUPCTool = Range("A:A").Find("UPC Tool", lookat:=xlPart).Offset(1, 0).Value
End If

'' Collect whether Sales Volume Channel Percentages vary by category.
' Checks to ensure user completed the user-defined field on the Instructions tab.
If Range("A:A").Find("Percents of Channel Sales vary by category", lookat:=xlPart).Offset(1, 0).Value = "" Then
    MsgBox ("You must answer whether or not Channel Sales Percentages vary by category.")
    End
Else
    doPercentsVary = Range("A:A").Find("Percents of Channel Sales vary by category", lookat:=xlPart).Offset(1, 0).Value
End If

End Sub
Sub checkCategories()
' PURPOSE: copies categories from different tabs onto a new worksheet "CheckCategories." Calls a sub to do some category comparison work.

' Create new worksheet: CheckCategories.
Worksheets.Add(After:=Worksheets(Worksheets.Count)).Name = "CheckCategories"

' Copy/paste unique list of categories from "Sampling Template" tab onto "CheckCategories" sheet.
Template.Activate
Range(Range("D2"), Range("D2").End(xlDown)).Copy
Worksheets("CheckCategories").Activate
Range("A1").PasteSpecial
Range(Range("A1"), Range("A1").End(xlDown)).removeDuplicates Columns:=Array(1), Header:=xlNo

' Checks doing HDA in this plan.
If planType = "HDA Only" Or planType = "Both" Then

    ' Copy/paste unique list of categories from "HDA Target Totals" tab onto "CheckCategories" sheet.
    HDATargets.Activate
    Range(Range("B4"), Range("B4").End(xlDown)).Copy
    Worksheets("CheckCategories").Activate
    Range("B1").PasteSpecial
    Range(Range("B1"), Range("B1").End(xlDown)).removeDuplicates Columns:=Array(1), Header:=xlNo
    nRowsTarg = Range(Range("B1"), Range("B1").End(xlDown)).Rows.Count

    ' Check if Channel Volume Percentages vary by category. Note: if no, volume %s won't include categories.
    If doPercentsVary = "Yes" Then
        ' Copy/paste unique list of categories from "HDA Sales Volume Percent" tab onto "CheckCategories" sheet.
        HDAVolume.Activate
        Range(Range("B4"), Range("B4").End(xlDown)).Copy
        Worksheets("CheckCategories").Activate
        Range("C1").PasteSpecial
        Range(Range("C1"), Range("C1").End(xlDown)).removeDuplicates Columns:=Array(1), Header:=xlNo
        nRowsVol = Range(Range("C1"), Range("C1").End(xlDown)).Rows.Count
    End If
    
End If

' Checks doing Retail in this plan.
If planType = "Retail Only" Or planType = "Both" Then

    ' Copy/paste unique list of categories from "Retail Target Totals" tab onto "CheckCategories" sheet.
    RTLTargets.Activate
    Range(Range("B4"), Range("B4").End(xlDown)).Copy
    Worksheets("CheckCategories").Activate
    If planType = "Retail Only" Then Range("B1").PasteSpecial ' If Retail Only, then can paste in row 1 of the column.
    If planType = "Both" Then Range("B10000").End(xlUp).Offset(1, 0).PasteSpecial ' If both, then pastes beneath the HDA values.
    Range(Range("B1"), Range("B1").End(xlDown)).removeDuplicates Columns:=Array(1), Header:=xlNo
    nRowsTarg = Range(Range("B1"), Range("B1").End(xlDown)).Rows.Count

    ' Check if Channel Volume Percentages vary by category. Note: if no, volume %s won't include categories.
    If doPercentsVary = "Yes" Then
        ' Copy/paste unique list of categories from "Retail Sales Volume Percent" tab onto "CheckCategories" sheet.
        RTLVolume.Activate
        Range(Range("B4"), Range("B4").End(xlDown)).Copy
        Worksheets("CheckCategories").Activate
        If planType = "Retail Only" Then Range("C1").PasteSpecial ' If Retail Only, then can paste in row 1 of the column.
        If planType = "Both" Then Range("C10000").End(xlUp).Offset(1, 0).PasteSpecial ' If both, then pastes beneath the HDA values.
        Range(Range("C1"), Range("C1").End(xlDown)).removeDuplicates Columns:=Array(1), Header:=xlNo
        nRowsVol = Range(Range("C1"), Range("C1").End(xlDown)).Rows.Count
    End If

End If

End Sub
Sub checkCategoriesMatch()
' PURPOSE: Sort each category set, check the number of rows for each are the same, then check to ensure categories from all relevant tabs match.
'Display an alert then end the program if they are not the same.

' Declare variables
Dim i As Integer 'row counter
Dim j As Integer 'column counter
Dim nCol As Integer 'number of columns

' Count number of columns
nCol = Range(Range("A1"), Range("C10000").End(xlUp)).Columns.Count

' Count number of rows
nRowsTemp = Range("A1").CurrentRegion.Rows.Count

' Sort each column.
Range("A1").EntireColumn.Sort Key1:=Range("A1"), Order1:=xlAscending, Header:=xlNo
Range("B1").EntireColumn.Sort Key1:=Range("B1"), Order1:=xlAscending, Header:=xlNo
Range("C1").EntireColumn.Sort Key1:=Range("C1"), Order1:=xlAscending, Header:=xlNo

' Checks if row counts are the exact same. Gives an alert if not.
If nRowsTemp <> nRowsTarg Then
    MsgBox ("The Categories do not match exactly on the Template and Target totals tabs. Please fix these, delete the CheckCategories sheet, and rerun the program.")
    End
ElseIf nRowsTarg <> nRowsVol And doPercentsVary = "Yes" Then
    MsgBox ("The Categories do not match exactly on the Volume and Target Totals tabs. Please fix these, delete the CheckCategories sheet, and rerun the program.")
    End
End If

' Look through categories & check to ensure the columns match exactly.
'' Loop through columns.
For j = 0 To nCol - 2

    ' Checks if Percents are NOT broken out by categories and the program's about to check those columns, then skip it (exits sub).
    If j = 1 And doPercentsVary = "No" Then
        Exit Sub
    End If

    '' Loop through rows.
    For i = 0 To nRowsTemp - 1
        
        ' Checks if the value in the first value matches the values on the same row in the second column.
        If Range("A1").Offset(i, j).Value <> Range("A1").Offset(i, j + 1).Value Then
        
            ' If they don't match, then display an alert box & end the program.
            MsgBox ("The Categories do not match exactly. Please fix these, delete the CheckCategories sheet, and rerun the program.")
            End
        
        End If

    Next i
    
Next j

End Sub
Sub formatUPCs()
' PURPOSE: Clean up CU UPC & Shipper UPC columns. Replace all punctuation and spaces, remove rows whether either one has no data

' Declare variables
Dim nRows As Integer 'total rows
Dim i As Integer 'row counter
Dim j As Integer 'column counter

' Activate worksheet
Worksheets("Sampling Template Cleaned").Activate

''' Replace all punctuation and spaces in the CU UPC column
' Insert column
Range("B1").EntireColumn.Insert
' Apply formula removing punctuation and spaces
Range("B2").Formula = "=removeSpecial(A2)"
' Copy formula
Range("B2").Copy
' Paste formula down entire column
Range(Range("B3"), Range("A100000").End(xlUp).Offset(0, 1)).PasteSpecial xlPasteFormulas
' Copy new column
Range(Range("B2"), Range("B100000").End(xlUp)).Copy
' Paste as values over previous column
Range(Range("A2"), Range("A100000").End(xlUp)).PasteSpecial xlPasteValues
' Delete new column (with formulas) - no longer needed
Range("B1").EntireColumn.Delete

''' Replace all punctuation and spaces in the Shipper UPC column
' Insert column
Range("C1").EntireColumn.Insert
' Apply formula removing punctuation and spaces
Range("C2").Formula = "=removeSpecial(B2)"
' Copy formula
Range("C2").Copy
' Paste formula down entire column
Range(Range("C3"), Range("B100000").End(xlUp).Offset(0, 1)).PasteSpecial xlPasteFormulas
' Copy new column
Range(Range("C2"), Range("C100000").End(xlUp)).Copy
' Paste as values over previous column
Range(Range("B2"), Range("B100000").End(xlUp)).PasteSpecial xlPasteValues
' Delete new column (with formulas) - no longer needed
Range("C1").EntireColumn.Delete

''' Loop through CU UPC & Shipper UPC to remove rows where either one has a null value.
' Calculate number of rows
nRows = Range("A1").CurrentRegion.Rows.Count - 1

' Loops through all columns.
For j = 0 To 1

    ' Loops through all rows.
    For i = 1 To nRows
        Range("A1").Offset(i, j).Select
        
        ' Checks CU UPC or Shipper UPC cells for blank values
        If Range("A1").Offset(i, j).Value = "" Then
            
            ' Checks if we're at the end of the data. If yes, the exit this For Loop.
            If Range("A1").Offset(i, j).Address = Range("A10000").Offset(0, j).End(xlUp).Offset(1, 0).Address Then Exit For
        
            ' Delete rows with no CU UPC or Shipper UPC
            Range("A1").Offset(i, j).EntireRow.Delete
            
            ' Recalculates number of rows (since some have just been deleted)
            nRows = nRows - 1
            
            ' Resets the row counter back a step (so it doesn't the new row i, since deleting a row advances i+1 to i)
            i = i - 1
        End If
        
    Next i
    
Next j

'''' Apply UPC Expansion Tool, if appropriate, to the CU UPC field only
'If needsUPCTool = "Yes" Then
'
'    ' Insert column
'    Range("B1").EntireColumn.Insert
'
'End If


'Run function.
'Copy/paste as values as necessary.
'Reconcile the two CU UPC columns. (Not all UPCs in the list require transformation.)
'Delete duplicate column.


'' !!!!!!!!!!!!!!!!


End Sub
Sub cleanSalesVolume()
' PURPOSE: Clean up Sales Volume. I.e. format to number with zero decimal places, delete if sales volume is negative or blank, and remove punctuation and spaces.

' Declare variables
Dim nRows As Integer 'total rows
Dim i As Integer 'row counter
Dim nLoop As Integer 'loop counter (captures actual number of loops, since deletions might require a i - 1). This is necessary to avoid an endless loop.

' Ensure proper worksheet is activated.
Worksheets("Sampling Template Cleaned").Activate

'' Format Sales Volume to number with zero decimal places
'Range("N2").EntireColumn.NumberFormat = "General" '"#0"

''' Delete where Sales Volume is <=0 or is blank.

' Calculate number of rows
nRows = Range("B1").CurrentRegion.Rows.Count - 1

' Set loop counter to zero
nLoop = 0

' Loop through all rows in "Sales Volume" column.
For i = 1 To nRows

Range("N1").Offset(i, 0).Select

    ' Exit the loop if we've cycled through all the rows.
    If nLoop = nRows Then Exit For

    ' Determine if value is <= zero or blank.
    If Range("N1").Offset(i, 0).Value <= 0 Or Range("N1").Offset(i, 0).Value = "" Then
        ' If yes, then delete the entire row.
        Range("N1").Offset(i, 0).EntireRow.Delete
        ' Resets the row counter back a step (so it doesn't the new row i, since deleting a row advances i+1 to i)
        i = i - 1
    End If
    
    ' Add to loop counter - this is considered an actual count whereas i is changed when a row is deleted.
    nLoop = nLoop + 1

Next i

''' Replace all punctuation and spaces in the Sales Volume column.
'' NOTE: wait to do this until AFTER the first loop, because removing punctuation will make negative numbers positive. We need to remove the negative numbers before this happens.

' Insert column
Range("O1").EntireColumn.Insert
' Apply formula removing punctuation and spaces
Range("O2").Formula = "=removeSpecial(N2)"
' Copy formula
Range("O2").Copy
' Paste formula down entire column
Range(Range("O3"), Range("N900000").End(xlUp).Offset(0, 1)).PasteSpecial xlPasteFormulas
' Copy new column
Range(Range("O2"), Range("O900000").End(xlUp)).Copy
' Paste as values over itself
Range(Range("O2"), Range("O900000").End(xlUp)).PasteSpecial xlPasteValues
' Copy/paste column header to new column
Range("N1").Copy
Range("O1").PasteSpecial
' Delete previous column - no longer needed (duplicate)
Range("N1").EntireColumn.Delete

'' Delete where Sales Volume is blank. Note: necessary to run this again, because removing punctuation may give us more blanks.

' Calculate number of rows
nRows = Range("B1").CurrentRegion.Rows.Count - 1

' Set loop counter to zero
nLoop = 0

' Loop through all rows in "Sales Volume" column.
For i = 1 To nRows

Range("N1").Offset(i, 0).Select

    ' Exit the loop if we've cycled through all the rows.
    If nLoop = nRows Then Exit For

    ' Determine if value is blank.
    If Range("N1").Offset(i, 0).Value <= 0 Or Range("N1").Offset(i, 0).Value = "" Then
        ' If yes, then delete the entire row.
        Range("N1").Offset(i, 0).EntireRow.Delete
        ' Resets the row counter back a step (so it doesn't the new row i, since deleting a row advances i+1 to i)
        i = i - 1
    End If

    ' Add to loop counter - this is considered an actual count whereas i is changed when a row is deleted.
    nLoop = nLoop + 1

Next i

End Sub
Function removeSpecial(sInput As String) As String
' PURPOSE: Function that removes special characters and spaces
    Dim sSpecialChars As String
    Dim i As Long
    sSpecialChars = "\/:*?""<>|#^!@%&()[]{}- " ' NOTE: do NOT remove dollar signs ($) as this will mess up the subtotal function later.
    For i = 1 To Len(sSpecialChars)
        sInput = Replace$(sInput, Mid$(sSpecialChars, i, 1), "")
    Next
    removeSpecial = sInput
End Function
Function UPCE2A(UPCE As String) As String
'' PURPOSE: Compresses "normal" UPCs. "Compressed" UPC's should either be 6, 7 or 8 digits long.
'' AUTHOR: Marcus Ware. Date unknown.
'
'' check the validity of the input data
'If Not IsNumeric(UPCE) Then
'    MsgBox ("UPC Codes must contain Numeric Data Only!")
'    Exit Function
'End If
'
'Select Case Len(UPCE)
'    Case 6       ' do nothing everything is OK
'      UPCEString$ = UPCE
'    Case 7
'      UPCEString$ = Left$(UPCE, 6)
'      ' truncate last digit - assume that it is the UPCE check digit
'    Case 8
'      UPCEString$ = Mid$(UPCE, 2, 6)
'      ' truncate first and last digit
'      ' assume that the first digit is the number system digit
'      ' and the last digit is the UPCE check digit
'    Case Else
'      MsgBox "wrong size UPCE message"
'      Exit Function
'End Select
'
'' break up the string into its 6 individual digits
'Digit1$ = Mid$(UPCEString$, 1, 1)
'Digit2$ = Mid$(UPCEString$, 2, 1)
'Digit3$ = Mid$(UPCEString$, 3, 1)
'Digit4$ = Mid$(UPCEString$, 4, 1)
'Digit5$ = Mid$(UPCEString$, 5, 1)
'Digit6$ = Mid$(UPCEString$, 6, 1)
'
'Select Case Digit6$     ' expand the 6 digit UPCE number to a 12 digit UPCA number
'       Case "0", "1", "2"
'         ManufacturerNumber$ = Digit1$ + Digit2$ + Digit6$ + "00"
'         ItemNumber$ = "00" + Digit3$ + Digit4$ + Digit5$
'       Case "3"
'         ManufacturerNumber$ = Digit1$ + Digit2$ + Digit3$ + "00"
'         ItemNumber$ = "000" + Digit4$ + Digit5$            ' original code was in error
'       Case "4"
'         ManufacturerNumber$ = Digit1$ + Digit2$ + Digit3$ + Digit4$ + "0"
'         ItemNumber$ = "0000" + Digit5$             ' original code was in error
'       Case Else
'         ManufacturerNumber$ = Digit1$ + Digit2$ + Digit3$ + Digit4$ + Digit5$
'         ItemNumber$ = "0000" + Digit6$
'End Select
'
'' put the number system digit "0" together with the manufacturer code and Item number
'Msg$ = "0" + ManufacturerNumber$ + ItemNumber$
'
'' calculate the check digit - note UPCE and UPCA check digits are the same
'Check% = 0            ' initialize the check digit value
'For X% = 1 To 11
'       test$ = Mid$(Msg$, X%, 1)
'       Select Case X%
'         Case 1, 3, 5, 7, 9, 11
'             Check% = Check% + Val(test$) * 7       ' odd position digits multiplied by 7
'         Case 2, 4, 6, 8, 10
'             Check% = Check% + Val(test$) * 9       ' even position digits multiplied by 9
'       End Select
'Next
'
'Check% = (Check% Mod 10) + 48   ' convert value to ASCII character value
'CheckChar$ = Chr$(Check%)               ' check character
'
'UPCE2A = Msg$ + CheckChar$      ' put the pieces together and return

End Function
Function UPCA2E(UPCA)
'' PURPOSE: Expands "compressed" UPCs.
'' AUTHOR: Marcus Ware. Date unknown.
'
'' Declare variables
'Dim csumTotal
'Dim holdString
'
'csumTotal = 0 ' The checksum working variable starts at zero
'
'' If the source message string is less than 12 characters long, we make it 12 characters
'If Len(UPCA) < 12 Then
'    holdString = "000000000000" & UPCA
'    UPCA = Right(holdString, 12)
'End If
'
'If Left(UPCA, 1) <> "0" And Left(UPCA, 1) <> "1" Then
'    MsgBox "Invalid UPC-E message" '(only 0 & 1 are valid)
'Else
'    If Mid(UPCA, 4, 3) = "000" Or Mid(UPCA, 4, 3) = "100" Or Mid(UPCA, 4, 3) = "200" Then
'        UPCE = Mid(UPCA, 2, 2) & Mid(UPCA, 9, 3) & Mid(UPCA, 4, 1)
'    ElseIf Mid(UPCA, 5, 2) = "00" Then
'        UPCE = Mid(UPCA, 2, 3) & Mid(UPCA, 10, 2) & "3"
'    ElseIf Mid(UPCA, 6, 1) = "0" Then
'        UPCE = Mid(UPCA, 2, 5) & Mid(UPCA, 11, 1) & "4"
'    ElseIf Val(Mid(UPCA, 11, 1)) >= 5 Then
'        UPCE = Mid(UPCA, 2, 5) & Mid(UPCA, 11, 1)
'    Else
'        MsgBox "Invalid UPC-E Message"
'    End If
'End If
'
'UPCA2E = UPCE

End Function
Sub removeDuplicates()
' PURPOSE: Concatenates columns A & B, formats sales volume to currency with zero decimal places, removes duplicate rows (based on new concatenated field), deletes concatenated field (as it's no longer needed).

' Ensure proper worksheet is activated.
Worksheets("Sampling Template Cleaned").Activate

' Declare variables
Dim pos As String
Dim i As Integer
Dim nRows As Integer

''' Insert a column & add concatenation to it
' Insert a column for the concatenation
Range("C1").EntireColumn.Insert
' Insert concatenation formula in cell C2
Range("C2").Formula = "=CONCATENATE(A2, ""-"", B2)"
' Copy formula
Range("C2").Copy
' Paste formula down entire column
Range(Range("C3"), Range("B100000").End(xlUp).Offset(0, 1)).PasteSpecial xlPasteFormulas
' Copy new column
Range("C1").EntireColumn.Copy
' Paste as values over previous column
Range("C1").EntireColumn.PasteSpecial xlPasteValues

''' Format Sales Volume to currency with zero decimal places
Range("O:O").Select
With Selection
    Selection.NumberFormat = "$###0" '"General"
    .Value = .Value
End With

''' Remove duplicates loop.

nRows = Range("C1").CurrentRegion.Rows.Count - 1

For i = 1 To nRows
    
    pos = Range(Range("C2"), Range("C2").End(xlDown)).Find(Range("C1").Offset(i, 0)).Address
    
    ' If cell of the value searched is the same as the value found (i.e. no duplicate value found), then change the variable to empty.
    If pos = Range("C1").Offset(i, 0).Address Then
        pos = ""
    End If
    
    ' Checks if a duplicate is found, if yes:
    If pos <> "" Then
        If Range(pos).Offset(0, 12).Value <= Range("C1").Offset(i, 12).Value Then
            ' Delete the duplicate
            Range(pos).EntireRow.Delete
            ' Set i back a step. Otherwise we end up skipping a row. E.g. if delete row 2, then row 3 becomes row 2 and would be skipped if we didn't set the counter back to 2.
            i = i - 1
        Else
            ' Delete the original row
            Range("C1").Offset(i, 0).EntireRow.Delete
            ' Set i back a step. Otherwise we end up skipping a row. E.g. if delete row 2, then row 3 becomes row 2 and would be skipped if we didn't set the counter back to 2.
            i = i - 1
        End If
    End If
    
    ' Checks if at the end - if yes, then exit the loop. This is necessary because deleting rows changes our end point.
    If Range("C1").Offset(i, 0).Address = Range("C1000000").End(xlUp).Address Then Exit For
    
Next i

''' Delete new column (concatenation) - no longer needed
Range("C1").EntireColumn.Delete

End Sub
Sub sortCates()
' PURPOSE: sorts columns in ascending order. This is necessary to properly create the sample blocks.
' Note: must sort in threes (doesn't accept more arguments than that). Must also reverse the chunks sort order, so it turns out right. (E.g. sort by 4, 5, & 6 prior to sorting 1, 2, & 3.) See https://sfmagazine.com/post-entry/june-2017-excel-sorting-with-vba.

' Ensure proper worksheet is activated.
Worksheets("Sampling Template Cleaned").Activate

' Sort by Columns J-L
Range("B2").CurrentRegion.Sort _
Key1:=Range("J1"), Order1:=xlAscending, _
Key2:=Range("K1"), Order2:=xlAscending, _
Key3:=Range("L1"), Order3:=xlAscending, _
Header:=xlYes

' Sort by Columns G-I
Range("B2").CurrentRegion.Sort _
Key1:=Range("G1"), Order1:=xlAscending, _
Key2:=Range("H1"), Order2:=xlAscending, _
Key3:=Range("I1"), Order3:=xlAscending, _
Header:=xlYes

' Sort by Columns D-F
Range("B2").CurrentRegion.Sort _
Key1:=Range("D1"), Order1:=xlAscending, _
Key2:=Range("E1"), Order2:=xlAscending, _
Key3:=Range("F1"), Order3:=xlAscending, _
Header:=xlYes

End Sub
Sub createSampleBlocks()
' PURPOSE: Create CategorySalesVolume worksheet, creates sample blocks (based on "Category 2" field), collects total sales volume, does some formatting.

' Declare variables
'Dim firstAddress As String
Dim c As Range

' Create new worksheet: CategorySalesVolume.
Worksheets.Add(After:=Worksheets(Worksheets.Count)).Name = "CategorySalesVolume"

' Ensure proper worksheet is activated.
Worksheets("Sampling Template Cleaned").Activate

' Create Sample Blocks by subtotaling Sales Volume and grouping by "Category 2" field.
Range("B2").CurrentRegion.Subtotal GroupBy:=5, Function:=xlSum, Replace:=True, PageBreaks:=False, SummaryBelowData:=1, TotalList:=14

' Collect total Sales Volume
Range("N1").End(xlDown).Copy
Worksheets("CategorySalesVolume").Range("D2").PasteSpecial Paste:=xlPasteValues
Range("E1").End(xlDown).ClearContents
Range("N1").End(xlDown).ClearContents

' Set column names on "CategorySalesVolume" worksheet.
Worksheets("CategorySalesVolume").Range("D1").Value = "Total Sales Volume"
Worksheets("CategorySalesVolume").Range("A1").Value = "Category"
Worksheets("CategorySalesVolume").Range("B1").Value = "Sales Volume"

' Determine if row is a Sample Block subtotal row.
With Worksheets("Sampling Template Cleaned").Range(Range("E1"), Range("E1").End(xlDown))
    Set c = .Find("Total", LookIn:=xlValues)
    
    ' If find a row with the word "Total" in the "Category 2" column, then...
    If Not c Is Nothing Then
        'firstAddress = c.Address
        
        Do
        
            ' Determine if the Category column for that row is blank AND it's not the last row of data. If yes, then...
            If c.Offset(0, -1) = "" Then
        
                ' Set "Category" field = "Category" from row above (ditto all the fields from Category to Col M [No Data]).
                Range(c.Offset(-1, -1), c.Offset(-1, 8)).Copy
                Range(c.Offset(0, -1), c.Offset(0, 8)).PasteSpecial
                
                ' Set "Description" field = "Category 2" field value from row above
                c.Offset(-1, 0).Copy
                c.Offset(0, -2).PasteSpecial
                
                ' Bold the entire row.
                c.EntireRow.Font.Bold = True
                
                ' Collect Category & Sales Volume
                Worksheets("CategorySalesVolume").Range("A900000").End(xlUp).Offset(1, 0).Value = c.Offset(0, -1).Value
                Worksheets("CategorySalesVolume").Range("B900000").End(xlUp).Offset(1, 0).Value = c.Offset(0, 9).Value
                
                ' Ensure proper worksheet is activated.
                Worksheets("Sampling Template Cleaned").Activate
                
            End If
            
            ' Exit loop if at the end
            If c.Address = Range("E100000").End(xlUp).Address Then Exit Sub
                
            ' Find next Sample Block
            Set c = .FindNext(c)
            
        ' Continue doing this as long as we keep finding the word "Total" in the "Category 2" column.
        Loop While Not c Is Nothing
        
    End If
    
End With

End Sub
Sub pivotSalesByCategory()
' PURPOSE: Creates Pivot Table of Sales Volume sums by Category.
''Source: https://www.thespreadsheetguru.com/blog/2014/9/27/vba-guide-excel-pivot-tables
''Resource: List of XlConsolidationFunctions: https://docs.microsoft.com/en-us/office/vba/api/excel.xlconsolidationfunction

''' DECLARE VARIABLES

' Dims for PivotTable
Dim pvtCache As PivotCache
Dim pvt As PivotTable
Dim StartPvt As String
Dim SrcData As String

' Dims for Value Fields
Dim pf As String
Dim pf_Name As String

' Dims for Sheet Title
Dim activeSheetName As String

''' ENSURE PROPER WORKSHEET IS ACTIVATED.
Worksheets("CategorySalesVolume").Activate

''' COLLECT ACTIVE SHEET NAME
activeSheetName = ActiveSheet.Name

''' CREATE PIVOTTABLE SHELL
'PURPOSE: Add a calculated field to a pivot table
'SOURCE: www.TheSpreadsheetGuru.com

'Determine the data range you want to pivot
  SrcData = activeSheetName & "!" & Range(Range("A1"), Range("B1").End(xlDown)).Address(ReferenceStyle:=xlR1C1)

'Where do you want Pivot Table to start?
  StartPvt = activeSheetName & "!" & ActiveSheet.Range("F1").Address(ReferenceStyle:=xlR1C1)

'Create Pivot Cache from Source Data
  Set pvtCache = ActiveWorkbook.PivotCaches.Create( _
    SourceType:=xlDatabase, _
    SourceData:=SrcData)

'Create Pivot table from Pivot Cache
  Set pvt = pvtCache.CreatePivotTable(TableDestination:=StartPvt, TableName:="PivotTable1")

''' ADD PIVOT FIELDS

Set pvt = ActiveSheet.PivotTables("PivotTable1")
         
  'Add item to the Row Labels
    pvt.PivotFields("Category").Orientation = xlRowField
    
  'Turn on Automatic updates/calculations --like screenupdating to speed up code
    pvt.ManualUpdate = False


''' ADD VALUES FIELDS
'PURPOSE: Add A Values Field to a Pivot Table
'SOURCE: www.TheSpreadsheetGuru.com

Set pvt = ActiveSheet.PivotTables("PivotTable1")

' Add Category Sum
pf_Name = "Category Sum"
pvt.AddDataField pvt.PivotFields(2), pf_Name, xlSum

'Change Data's Number Format
  pvt.DataBodyRange.NumberFormat = "#0"

End Sub
Sub collectPivotTableData()
' PURPOSE: Collects pivot table data into array. Will use later to calculate Sample Block % of Category Sales Volume.
'' Fields of interest: Case & Consumer Unit SampleNbr, height, depth, width, & weight

Dim i As Integer 'row counter
Dim nRows As Integer 'number of rows

''' COLLECT CASE PIVOT DATA

' Activate worksheet
Worksheets("CategorySalesVolume").Activate

' Count rows of data
nRows = Range(Range("F2"), Range("F2").End(xlDown)).Rows.Count - 1

' Resizes the array to accomodate the data from this sheet
ReDim arrayCategory(1 To nRows)
ReDim arraySalesVolume(1 To nRows)

' Loop to collect data
For i = 1 To nRows
    arrayCategory(i) = Range("F1").Offset(i, 0).Value
    arraySalesVolume(i) = Range("G1").Offset(i, 0).Value
Next i

End Sub
Sub calcBlockPercents()
' PURPOSE: Create new "Sample Block % of Category Total" column formatted as a number with two decimal places.

' Declare variable
Dim c As Range

' Ensure proper worksheet is activated.
Worksheets("Sampling Template Cleaned").Activate

' Add column heading
Range("P1").Value = "Sample Block % of Category Total"
Range("P1").WrapText = True

' Format new column as number with 2 decimal places
Range("P:P").Select
With Selection
    Selection.NumberFormat = "0.###0" '"General"
    '.Value = .Value
End With

' Loop through each cell in column N (after the first row).
For Each c In Range(Range("N2"), Range("N2").End(xlDown))
    ' Determine if bolded font.
    If c.Font.Bold = True Then
        ' If yes, then calculate the percent of category total for that Sample Block
        'Basic formula format: =N2/(VLOOKUP(D2,CategorySalesVolume!F2:G3,2,FALSE))
        c.Offset(0, 2).Formula = "=" & c.Address & "/(VLOOKUP(" & c.Offset(0, -10).Address & ",CategorySalesVolume!F2:" & Range("G1").End(xlDown).Offset(-1, 0).Address & ", 2, FALSE))"
    End If
Next

' Copy/paste as values.
Range("P:P").Copy
Range("P:P").PasteSpecial xlPasteValues

End Sub
Sub splitCleanedData()
' PURPOSE: create a new worksheet for each plan type.

' If both HDA & Retail
If planType = "Both" Then
    ' Copy/paste Cleaned Sampling Template into a new worksheet twice - once for HDA & one for Retail
    Application.DisplayAlerts = False
    Worksheets("Sampling Template Cleaned").Copy After:=Template
    Worksheets("Sampling Template Cleaned (2)").Name = "HDA Data"
    Worksheets("Sampling Template Cleaned").Copy After:=Template
    Worksheets("Sampling Template Cleaned (2)").Name = "Retail Data"
    Application.DisplayAlerts = True

' If HDA only
ElseIf planType = "HDA Only" Then
    ' Copy/paste Cleaned Sampling Template into a new worksheet: HDA Data
    Application.DisplayAlerts = False
    Worksheets("Sampling Template Cleaned").Copy After:=Template
    Worksheets("Sampling Template Cleaned (2)").Name = "HDA Data"
    Application.DisplayAlerts = True

' If Retail only
ElseIf planType = "Retail Only" Then
    ' Copy/paste Cleaned Sampling Template into a new worksheet: Retail Data
    Application.DisplayAlerts = False
    Worksheets("Sampling Template Cleaned").Copy After:=Template
    Worksheets("Sampling Template Cleaned (2)").Name = "Retail Data"
    Application.DisplayAlerts = True

End If

End Sub
Sub generateTargets()
' PURPOSE: for each new plan type worksheet, calculate the Target column for that Sample Block.

' Declare variables
Dim ws As Worksheet
Dim c As Range
Dim targetTotalsTab As String

' Loop through each worksheet in the workbook
For Each ws In ThisWorkbook.Worksheets

    ' Determine if it's one of the worksheets generated by the code itself. If yes, then...
    If ws.Name = "HDA Data" Or ws.Name = "Retail Data" Then
              
        ' Determine which target totals tab to use & store it in a variable.
        If ws.Name = "HDA Data" Then targetTotalsTab = "HDA Target Totals"
        If ws.Name = "Retail Data" Then targetTotalsTab = "Retail Target Totals"
        
        ws.Activate
        
        ' Loop through each cell in column N (after the first row).
        For Each c In Range(Range("N2"), Range("N2").End(xlDown))
            ' Determine if bolded font.
            If c.Font.Bold = True Then
                ' If yes, then calculate the Target column for that Sample Block.
                ' Basic formula format: =P2*(VLOOKUP(D2,'Retail Target Totals'!B4:C5,2,FALSE))
                c.Offset(0, 1).Formula = "=ROUND(" & c.Offset(0, 2).Address & "*(VLOOKUP(" & c.Offset(0, -10).Address & ",'" & targetTotalsTab & "'!B4:" & Range("C100000").End(xlUp).Address & ", 2, FALSE)),0)"
            End If
        Next
        
    End If

Next ws

End Sub
Sub generateTargetsPerChannel()
' PURPOSE: Calculate Targets per Channel for each Sample Block.

' Declare variables
Dim ws As Worksheet
Dim c As Range
Dim salesVolPercentTab As String
Dim j As Integer ' col loop counter
Dim nCols As Integer ' count of channels

' Loop through each worksheet in the workbook
For Each ws In ThisWorkbook.Worksheets

    ' Determine if it's one of the Data worksheets generated. If yes, then...
    If ws.Name = "HDA Data" Or ws.Name = "Retail Data" Then
              
        ' Determine which target totals tab to use & store it in a variable.
        If ws.Name = "HDA Data" Then salesVolPercentTab = "HDA Sales Volume Percent"
        If ws.Name = "Retail Data" Then salesVolPercentTab = "Retail Sales Volume Percent"
        
        ' Activate Sales Volume Percent tab.
        Worksheets("" & salesVolPercentTab & "").Activate
        ' Copy channel names
        Range(Range("C3"), Range("ZZ3").End(xlToLeft)).Copy
        
        ' Activate Data tab.
        ws.Activate
        ' Paste channel names.
        Range("Q1").PasteSpecial
        
        ' Count number of channels to loop through.
        nCols = Range(Range("Q1"), Range("ZZ1").End(xlToLeft)).Columns.Count
        
        For j = 1 To nCols
        
            ' Loop through each cell in column N (after the first row).
            For Each c In Range(Range("N2"), Range("N2").End(xlDown))
                
                ' Determine if bolded font.
                If c.Font.Bold = True Then
                                       
                    ' If yes, then calculate the Target column for that Sample Block.
                    ' Basic formula format: =ROUND(O50*VLOOKUP(D50,'Retail Sales Volume Percent'!B4:F5,2,FALSE),0)
                    c.Offset(0, 2 + j).Formula = "=ROUND(" & c.Offset(0, 1).Address & "*(VLOOKUP(" & c.Offset(0, -10).Address & ",'" & salesVolPercentTab & "'!B4:" & Range("ZZ3").End(xlToLeft).End(xlDown).Address & ", " & 1 + j & ", FALSE)),0)"
                
                End If
            
            Next
        
        Next j
        
    End If

Next ws

End Sub
Sub cleanColumnHeadings()
' PURPOSE: deletes Shipper UPC column from Retail Data worksheet and, for columns with no data, changes header to "No Data".

' Declare variables.
Dim ws As Worksheet
Dim j As Integer ' loop column counter

' Loop through each worksheet in the workbook
For Each ws In ThisWorkbook.Worksheets

    ' Determine if it's one of the Data worksheets generated. If yes, then...
    If ws.Name = "HDA Data" Or ws.Name = "Retail Data" Then
    
        ' Activate worksheet
        ws.Activate
    
        ' Checks doing Retail in this plan. If yes, then delete data from the Shipper UPC column.
        If ws.Name = "Retail Data" Then Range(Range("B2"), Range("B900000").End(xlUp)).ClearContents
        
        For j = 0 To 13
            
            'If everything in a column is blank (aside from the header), then change the header to "No Data" (e.g. if says "CATEGORY 3 (if necessary)" then change to "No Data")
            If WorksheetFunction.CountA(Range("A1").Offset(0, j).EntireColumn) <= 1 Then Range("A1").Offset(0, j).Value = "No Data"
        
        Next j

    End If

Next ws

End Sub
Sub collectUserInput_CreateFiles()
' PURPOSE: checks to see that required user inputs (on the Instructions page) are completed with valid information.
'If yes, then collect the information for later use.
'If no, then display an alert.
' Specifically collects inputs related to naming new Sample Plan files.

' Activate Instructions Sheet
Instructions.Activate

'' Collect whether HDA, Retail, or both.
' Checks to ensure user completed the user-defined field on the Instructions tab.
If Range("A:A").Find("Plan Type", lookat:=xlPart).Offset(1, 0).Value = "" Then
    MsgBox ("You must fill in the Plan Type.")
    End
Else
    planType = Range("A:A").Find("Plan Type", lookat:=xlPart).Offset(1, 0).Value
End If

'' Collect Cient Name.
' Checks to ensure user completed the user-defined field on the Instructions tab.
If Range("A:A").Find("Client Name", lookat:=xlPart).Offset(1, 0).Value = "" Then
    MsgBox ("You must fill in the client's name.")
    End
Else
    clientName = Range("A:A").Find("Client Name", lookat:=xlPart).Offset(1, 0).Value
End If

'' Collect Year.
' Checks to ensure user completed the user-defined field on the Instructions tab.
If Range("A:A").Find("Year (used", lookat:=xlPart).Offset(1, 0).Value = "" Then
    MsgBox ("You must fill in the year.")
    End
Else
    year = Range("A:A").Find("Year (used", lookat:=xlPart).Offset(1, 0).Value
End If

'' Collect Quarter.
' Checks to ensure user completed the user-defined field on the Instructions tab.
If Range("A:A").Find("Quarter #", lookat:=xlPart).Offset(1, 0).Value = "" Then
    MsgBox ("You must fill in the quarter number.")
    End
Else
    quarter = Range("A:A").Find("Quarter #", lookat:=xlPart).Offset(1, 0).Value
End If

End Sub
Sub createSeparateFiles()
' PURPOSE: Creates and names new files containing the data for each plan type & channel. Inside the file, the data is separated by category in each worksheet within the workbook. Cleans up the columns (removes/replaces some columns).

' Declare variables.
Dim ws As Worksheet
Dim wb As Workbook
Dim newFileName As String
Dim worksheetName As String
Dim worksheetName_short As String
Dim channel As String
Dim toolFileName As String
Dim j As Integer ' col loop counter
Dim m As Integer ' col loop counter
Dim nCols As Integer ' number of channels
Dim k As Integer ' array loop counter
Dim i As Integer ' row loop counter
Dim nRows As Integer ' number of rows
Dim nLoop As Integer 'loop counter (captures actual number of loops, since deletions might require a i - 1). This is necessary to avoid an endless loop.


' Get file name for Sample Plan tool
toolFileName = ActiveWorkbook.Name

' Get file path of active workbook.
Call getFilePath

' Loop through each worksheet in the workbook
For Each ws In Workbooks(toolFileName).Worksheets

    ' Determine if it's one of the Data worksheets generated. If yes, then...
    If ws.Name = "HDA Data" Or ws.Name = "Retail Data" Then
    
        ' Activate worksheet
        ws.Activate
        
        ' Collect worksheet name
        worksheetName = ActiveSheet.Name
        
        ' Set shortened version of worksheet name (to be used in naming other worksheets later.
        If worksheetName = "HDA Data" Then worksheetName_short = "HDA"
        If worksheetName = "Retail Data" Then worksheetName_short = "Retail"
        
        ' Count number of channels to loop through.
        nCols = Range(Range("Q1"), Range("ZZ1").End(xlToLeft)).Columns.Count
        
        ' Loop through each channel
        For j = 1 To nCols
        
            Worksheets(worksheetName).Activate
            channel = Range("P1").Offset(0, j).Value
            
            ' Create new file.
            '' File name format: ClientName PlanType Channel Sample Plan Year_Qtr.
            newFileName = clientName & " " & worksheetName_short & " " & channel & " Sample Plan " & year & "_" & quarter
            Set wb = Workbooks.Add '.Name = "" & filepath & "\" & newFileName & ""
            Application.Wait (Now + TimeValue("0:00:05")) ' Pause to allow time to process.
            'Application.DisplayAlerts = False
            wb.SaveAs fileName:=filepath & "\" & newFileName, FileFormat:=xlWorkbookDefault 'xlExcel8 'xlWorkbookDefault 'ActiveWorkbook
            'Application.DisplayAlerts = True
            'Application.Wait (Now + TimeValue("0:00:10")) ' Pause to allow time to process.
            newFileName = ActiveWorkbook.Name
            
            ' Copy data & paste to new file as values & number formats.
            Workbooks(toolFileName).Activate
            Range("B2").CurrentRegion.Copy
            Workbooks(newFileName).Activate
            Range("A1").PasteSpecial xlPasteValuesAndNumberFormats
            
            For k = 1 To UBound(arrayCategory)
    
                ' Copy/paste Sheet1 & rename it the category name
                Workbooks(newFileName).Activate
                Worksheets("Sheet1").Copy After:=Workbooks(newFileName).Worksheets("Sheet1")
                Worksheets("Sheet1 (2)").Name = arrayCategory(k)
    
                ' Rename "Sales Volume" column to "No Data" and remove all content from rows.
                Range("N1").EntireColumn.ClearContents
                Range("N1").Value = "No Data"
                
                ' Set loop counter to zero
                nLoop = 0
    
                ' Delete other channel columns
                For m = 1 To nCols
                    
                    ' Exit the loop if we've cycled through all the rows.
                    If nLoop = nCols Then Exit For
                    
                    If Range("P1").Offset(0, m).Value <> channel Then
                        ' Deletes column.
                        Range("P1").Offset(0, m).EntireColumn.Delete
                        ' Resets the row counter back a step (so it doesn't the new row i, since deleting a row advances i+1 to i).
                        m = m - 1
                    End If
                    
                    ' Add to loop counter - this is considered an actual count whereas i is changed when a row is deleted.
                    nLoop = nLoop + 1
                Next m
                
                ' Set loop counter to zero
                nLoop = 0
                
                ' Calculate number of rows
                nRows = Range("D1").CurrentRegion.Rows.Count - 1
    
                ' Delete rows of different categories
                ''Loop through each row
                For i = 1 To nRows
                    
                    ' Exit the loop if we've cycled through all the rows.
                    If nLoop = nRows Then Exit For
    
                    ' Evaluates whether tab Category matches row category. If not, then:
                    If arrayCategory(k) <> Range("D1").Offset(i, 0).Value Then
                        ' Deletes row.
                        Range("D1").Offset(i, 0).EntireRow.Delete
                        ' Resets the row counter back a step (so it doesn't the new row i, since deleting a row advances i+1 to i).
                        i = i - 1
                    End If
                    
                    ' Add to loop counter - this is considered an actual count whereas i is changed when a row is deleted.
                    nLoop = nLoop + 1
    
                Next i
                
                ' Copy/paste over the Target column with the individual channel target numbers.
                Range("Q1").EntireColumn.Copy
                Range("O1").EntireColumn.PasteSpecial
                Range("O1").Value = "Target"
                
                ' Delete "Sample Block % of Category Total" & now duplicate channel target columns.
                Range("P1").EntireColumn.Delete
                Range("P1").EntireColumn.Delete
    
            Next k
            
            ' Delete Sheet1 without displaying alerts
            Application.DisplayAlerts = False
            Worksheets("Sheet1").Delete
            Application.DisplayAlerts = True
                
            ' Save & close new worbook without displaying alerts
            Application.DisplayAlerts = False
            Workbooks(newFileName).Save
            Workbooks(newFileName).Close
            Application.DisplayAlerts = True
            
        Next j
    
    End If

Next ws

End Sub
Function getFilePath()
' PURPOSE: Locate the filepath of the current workbook
    
    filepath = ActiveWorkbook.Path
    
End Function
